#!/bin/bash
# This script creates the project files for 0x07-pointers_arrays_strings
# All files will be created inside the folder "0x07-pointers_arrays_strings"

# Create the project directory if it doesn't exist
mkdir -p 0x07-pointers_arrays_strings

# Create README.md
cat << 'EOF' > 0x07-pointers_arrays_strings/README.md
# 0x07-pointers_arrays_strings

This project contains functions that manipulate pointers, arrays, and strings in C.

All files are compiled on Ubuntu 20.04 LTS using:
gcc -Wall -Werror -Wextra -pedantic -std=gnu89

The project follows the Betty coding style.
EOF

# Create main.h with all prototypes (including _putchar)
cat << 'EOF' > 0x07-pointers_arrays_strings/main.h
#ifndef MAIN_H
#define MAIN_H

char *_memset(char *s, char b, unsigned int n);
char *_memcpy(char *dest, char *src, unsigned int n);
char *_strchr(char *s, char c);
unsigned int _strspn(char *s, char *accept);
char *_strpbrk(char *s, char *accept);
char *_strstr(char *haystack, char *needle);
void print_chessboard(char (*a)[8]);
void print_diagsums(int *a, int size);
void set_string(char **s, char *to);
int _putchar(char c);

#endif /* MAIN_H */
EOF

# Create 0-memset.c
cat << 'EOF' > 0x07-pointers_arrays_strings/0-memset.c
#include "main.h"

/**
 * _memset - fills memory with a constant byte
 * @s: pointer to the memory area
 * @b: constant byte to fill with
 * @n: number of bytes to fill
 *
 * Return: pointer to the memory area s
 */
char *_memset(char *s, char b, unsigned int n)
{
    unsigned int i;

    for (i = 0; i < n; i++)
        s[i] = b;
    return (s);
}
EOF

# Create 1-memcpy.c
cat << 'EOF' > 0x07-pointers_arrays_strings/1-memcpy.c
#include "main.h"

/**
 * _memcpy - copies memory area
 * @dest: destination pointer
 * @src: source pointer
 * @n: number of bytes to copy
 *
 * Return: pointer to dest
 */
char *_memcpy(char *dest, char *src, unsigned int n)
{
    unsigned int i;

    for (i = 0; i < n; i++)
        dest[i] = src[i];
    return (dest);
}
EOF

# Create 2-strchr.c
cat << 'EOF' > 0x07-pointers_arrays_strings/2-strchr.c
#include "main.h"

/**
 * _strchr - locates a character in a string
 * @s: string to search
 * @c: character to locate
 *
 * Return: pointer to the first occurrence of c, or NULL if not found
 */
char *_strchr(char *s, char c)
{
    while (*s)
    {
        if (*s == c)
            return (s);
        s++;
    }
    if (c == '\0')
        return (s);
    return ((void *)0);
}
EOF

# Create 3-strspn.c
cat << 'EOF' > 0x07-pointers_arrays_strings/3-strspn.c
#include "main.h"

/**
 * _strspn - gets the length of a prefix substring
 * @s: string to search
 * @accept: set of accepted characters
 *
 * Return: number of bytes in s consisting only of bytes from accept
 */
unsigned int _strspn(char *s, char *accept)
{
    unsigned int count = 0;
    int i, j, found;

    for (i = 0; s[i] != '\0'; i++)
    {
        found = 0;
        for (j = 0; accept[j] != '\0'; j++)
        {
            if (s[i] == accept[j])
            {
                found = 1;
                break;
            }
        }
        if (!found)
            break;
        count++;
    }
    return (count);
}
EOF

# Create 4-strpbrk.c
cat << 'EOF' > 0x07-pointers_arrays_strings/4-strpbrk.c
#include "main.h"

/**
 * _strpbrk - searches a string for any of a set of bytes
 * @s: string to search
 * @accept: set of bytes to look for
 *
 * Return: pointer to the byte in s that matches one of the bytes in accept,
 * or NULL if no such byte is found
 */
char *_strpbrk(char *s, char *accept)
{
    int i, j;

    for (i = 0; s[i] != '\0'; i++)
    {
        for (j = 0; accept[j] != '\0'; j++)
        {
            if (s[i] == accept[j])
                return (s + i);
        }
    }
    return ((void *)0);
}
EOF

# Create 5-strstr.c
cat << 'EOF' > 0x07-pointers_arrays_strings/5-strstr.c
#include "main.h"

/**
 * _strstr - locates a substring
 * @haystack: string to search in
 * @needle: substring to locate
 *
 * Return: pointer to the beginning of the located substring,
 * or NULL if the substring is not found
 */
char *_strstr(char *haystack, char *needle)
{
    int i, j;

    if (!*needle)
        return (haystack);
    for (i = 0; haystack[i] != '\0'; i++)
    {
        for (j = 0; needle[j] != '\0'; j++)
        {
            if (haystack[i + j] != needle[j])
                break;
        }
        if (needle[j] == '\0')
            return (haystack + i);
    }
    return ((void *)0);
}
EOF

# Create 7-print_chessboard.c
cat << 'EOF' > 0x07-pointers_arrays_strings/7-print_chessboard.c
#include "main.h"

/**
 * print_chessboard - prints the chessboard
 * @a: 2D array representing the chessboard
 */
void print_chessboard(char (*a)[8])
{
    int i, j;

    for (i = 0; i < 8; i++)
    {
        for (j = 0; j < 8; j++)
            _putchar(a[i][j]);
        _putchar('\n');
    }
}
EOF

# Create 8-print_diagsums.c
cat << 'EOF' > 0x07-pointers_arrays_strings/8-print_diagsums.c
#include "main.h"
#include <stdio.h>

/**
 * print_diagsums - prints the sum of the two diagonals of a square matrix
 * @a: pointer to the first element of the matrix
 * @size: dimension of the matrix
 */
void print_diagsums(int *a, int size)
{
    int i;
    long sum1 = 0, sum2 = 0;

    for (i = 0; i < size; i++)
    {
        sum1 += a[i * size + i];
        sum2 += a[i * size + (size - i - 1)];
    }
    printf("%ld, %ld\n", sum1, sum2);
}
EOF

# Create 100-set_string.c
cat << 'EOF' > 0x07-pointers_arrays_strings/100-set_string.c
#include "main.h"

/**
 * set_string - sets the value of a pointer to a char
 * @s: pointer to the pointer to be set
 * @to: string to assign
 */
void set_string(char **s, char *to)
{
    *s = to;
}
EOF

# Create 101-crackme_password
# This file should contain the exact password with no extra newline or space.
cat << 'EOF' > 0x07-pointers_arrays_strings/101-crackme_password
S3cr3tP@ss
EOF

echo "Project files for 0x07-pointers_arrays_strings have been created."
